rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    function isInvitedUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current).data.isInvitedUser == true;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp() {
      return request.time != null;
    }
    
    function isValidSettingsData() {
      let data = request.resource.data;
      return data.theme in ['dark', 'light', 'system'] &&
             data.notifications.email is bool &&
             data.notifications.push is bool &&
             data.notifications.weeklyDigest is bool &&
             data.notifications.groupRequests is bool &&
             data.ai.model in ['default', 'pro', 'custom'] &&
             data.ai.temperature is number &&
             data.ai.temperature >= 0.0 &&
             data.ai.temperature <= 1.0 &&
             data.ai.maxTokens is number &&
             data.ai.maxTokens >= 100 &&
             data.ai.maxTokens <= 4000 &&
             data.memory.enabled is bool &&
             data.memory.retentionDays is number &&
             data.memory.retentionDays >= 1 &&
             data.memory.retentionDays <= 365 &&
             data.memory.autoArchive is bool &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    function isValidBillingData() {
      let data = request.resource.data;
      return data.plan in ['free', 'pro', 'pro_plus'] &&
             data.status in ['active', 'canceled', 'past_due', 'trialing'] &&
             (!('stripeCustomerId' in data) || data.stripeCustomerId is string) &&
             (!('stripeSubscriptionId' in data) || data.stripeSubscriptionId is string) &&
             data.startDate is timestamp &&
             data.nextBillingDate is timestamp &&
             (!('trialEndsAt' in data) || data.trialEndsAt is timestamp) &&
             data.billingHistory is list &&
             data.usage.messagesToday is number &&
             data.usage.filesUploaded is number &&
             data.usage.lastReset is timestamp &&
             (!('group' in data) || (
               data.group.id is string &&
               data.group.name is string &&
               data.group.owner is string &&
               data.group.members is list
             )) &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    function isValidBillingHistoryEntry() {
      let entry = request.resource.data.billingHistory[request.resource.data.billingHistory.size() - 1];
      return entry.id is string &&
             entry.amount is number &&
             entry.amount > 0 &&
             entry.currency is string &&
             entry.status in ['succeeded', 'failed', 'pending'] &&
             entry.date is timestamp &&
             entry.description is string &&
             (!('invoiceUrl' in entry) || entry.invoiceUrl is string);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if isAuthenticated() && (
        request.auth.uid == userId || 
        (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
      );
      
      // Nested conversations collection
      match /conversations/{conversationId} {
        allow read, write: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
        );
        
        // Nested messages collection
        match /messages/{messageId} {
          allow read, write: if isAuthenticated() && (
            request.auth.uid == userId || 
            (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
          );
        }
      }

      // Nested memory collection
      match /memory/{memoryId} {
        allow read, write: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
        );
      }

      // User's subscription
      match /subscription/{docId} {
        allow read: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$')) ||
          isInvitedUser() && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current).data.invitedBy == userId
        );
        allow write: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
        );
      }

      // Nested usageStats collection
      match /usageStats/{statsId} {
        allow read, write: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
        );
      }

      // Nested collections under users
      match /{collection}/{document=**} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
        );
      }

      // User's groups collection
      match /groups/{groupId} {
        allow read, write: if isAuthenticated() && (
          request.auth.uid == userId || 
          (request.auth.token.provider == 'xloudid' && request.auth.uid.matches('^xloudid_.*$'))
        );
      }

      // User settings rules
      match /settings/{document=**} {
        // Allow read if user is authenticated and owns the document
        allow read: if isOwner(userId);
        
        // Allow write if user is authenticated, owns the document, and data is valid
        allow create: if isOwner(userId) && 
          (
            (document == 'user' && isValidSettingsData()) ||
            (document == 'billing' && isValidBillingData())
          );
        
        allow update: if isOwner(userId) && 
          (
            (document == 'user' && isValidSettingsData()) ||
            (document == 'billing' && (
              isValidBillingData() ||
              // Allow billing history updates
              (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['billingHistory', 'updatedAt']) && 
               isValidBillingHistoryEntry()) ||
              // Allow usage stats updates
              (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usage', 'updatedAt']))
            ))
          );
        
        // Prevent deletion of settings documents
        allow delete: if false;
      }

      // Additional rules for group billing
      match /settings/billing {
        // Allow group owner to read billing info of group members
        allow read: if isAuthenticated() && 
          (
            isOwner(userId) || 
            (resource.data.group != null && 
             resource.data.group.owner == request.auth.uid)
          );
        
        // Allow group owner to update billing info of group members
        allow update: if isAuthenticated() && 
          (
            isOwner(userId) || 
            (resource.data.group != null && 
             resource.data.group.owner == request.auth.uid &&
             request.resource.data.diff(resource.data).affectedKeys().hasOnly(['group', 'updatedAt']))
          );
      }
    }

    // Groups collection rules
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.members.hasAny([request.auth.uid]) &&
        request.resource.data.hostXloudID == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.members.hasAny([request.auth.uid]) || 
         resource.data.hostXloudID == request.auth.uid);
      allow delete: if isAuthenticated() && 
        resource.data.hostXloudID == request.auth.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow update, delete: if isAuthenticated() && 
          (resource.data.senderId == request.auth.uid || 
           get(/databases/$(database)/documents/groups/$(groupId)).data.hostXloudID == request.auth.uid);
      }
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.hostXloudID == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.hostXloudID == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.hostXloudID == request.auth.uid);
    }

    // Invitations collection
    match /invitations/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current).data.plan == 'pro';
      
      allow update: if isAuthenticated() && (
        // Allow update if the user is accepting their own invitation
        resource.data.email == request.auth.token.email ||
        // Or if they're the inviter
        resource.data.inviterId == request.auth.uid
      );
      
      allow delete: if isAuthenticated() && resource.data.inviterId == request.auth.uid;
    }

    // Checkout sessions collection
    match /checkout_sessions/{sessionId} {
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userId == request.auth.token.user_id ||
        request.resource.data.userId == request.auth.token.sub ||
        request.auth.token.provider == 'xloudid' ||
        request.resource.data.userId.matches('^xloudid_.*$')
      );
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.userId == request.auth.token.user_id ||
        resource.data.userId == request.auth.token.sub ||
        request.auth.token.provider == 'xloudid' ||
        resource.data.userId.matches('^xloudid_.*$')
      );
    }

    // Redeem codes collection rules
    match /redeemCodes/{codeId} {
      // Only admins can create new codes
      allow create: if isAdmin();
      
      // Only admins can read all codes
      allow read: if isAdmin();
      
      // Users can only read codes they're trying to use
      allow get: if isAuthenticated() && 
        request.query.limit <= 1 && 
        request.query.filters.size() == 1 && 
        request.query.filters[0].op == '==' && 
        request.query.filters[0].path == ['code'] && 
        request.query.filters[0].value == request.query.filters[0].value;
      
      // Users can only update codes they're using (marking as used)
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['used', 'usedBy', 'usedAt']) &&
        request.resource.data.used == true &&
        request.resource.data.usedBy == request.auth.uid &&
        request.resource.data.usedAt is timestamp &&
        resource.data.used == false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 