rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isInvitedUser() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current).data.isInvitedUser == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Nested conversations collection
      match /conversations/{conversationId} {
        allow read, write: if isOwner(userId);
        
        // Nested messages collection
        match /messages/{messageId} {
          allow read, write: if isOwner(userId);
        }
      }

      // Nested memory collection
      match /memory/{memoryId} {
        allow read, write: if isOwner(userId);
      }

      // User's subscription
      match /subscription/{docId} {
        allow read: if isAuthenticated() && (
          isOwner(userId) || 
          isInvitedUser() && 
          get(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current).data.invitedBy == userId
        );
        allow write: if isOwner(userId);
      }

      // Nested usageStats collection
      match /usageStats/{statsId} {
        allow read, write: if isOwner(userId);
      }

      // Nested collections under users
      match /{collection}/{document=**} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }
    }

    // Groups collection rules
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.members.hasAny([request.auth.uid]) &&
        request.resource.data.hostXloudID == request.auth.uid;
      allow update: if isAuthenticated() && 
        (resource.data.members.hasAny([request.auth.uid]) || 
         resource.data.hostXloudID == request.auth.uid);
      allow delete: if isAuthenticated() && 
        resource.data.hostXloudID == request.auth.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() && 
          get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow update, delete: if isAuthenticated() && 
          (resource.data.senderId == request.auth.uid || 
           get(/databases/$(database)/documents/groups/$(groupId)).data.hostXloudID == request.auth.uid);
      }
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.hostXloudID == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.hostXloudID == request.auth.uid);
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.hostXloudID == request.auth.uid);
    }

    // Invitations collection
    match /invitations/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)/subscription/current).data.plan == 'pro';
      
      allow update: if isAuthenticated() && (
        // Allow update if the user is accepting their own invitation
        resource.data.email == request.auth.token.email ||
        // Or if they're the inviter
        resource.data.inviterId == request.auth.uid
      );
      
      allow delete: if isAuthenticated() && resource.data.inviterId == request.auth.uid;
    }

    // Checkout sessions collection
    match /checkout_sessions/{sessionId} {
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.userId == request.auth.token.user_id ||
        request.resource.data.userId == request.auth.token.sub ||
        request.auth.token.provider == 'xloudid' ||
        request.resource.data.userId.matches('^xloudid_.*$')
      );
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.userId == request.auth.token.user_id ||
        resource.data.userId == request.auth.token.sub ||
        request.auth.token.provider == 'xloudid' ||
        resource.data.userId.matches('^xloudid_.*$')
      );
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 